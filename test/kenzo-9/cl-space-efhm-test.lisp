;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*

(in-package :kenzo-test-9)

(in-suite :kenzo)


(when (or (string= (package-name (find-package 'cat)) "CAT-7")
          (string= (package-name (find-package 'cat)) "CAT-8"))

  (test cs-hat-u-t
        (cat-9:cat-9-init)
        (let ((c (cat-9:cs-hat-u-t (cat-9:k-z-1)))
              abar-degr
              gnrt)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (print (cat-9:? c (+ 6 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 6 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 11)
                (print (cat-9:? c (+ 4 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 4 abar-degr)
                                                     gnrt)))))))))


  (test cs-hat-t-u
        (cat-9:cat-9-init)
        (dotimes (i 5) (print (random-abar 8 4)))
        (let ((c (cat-9:cs-hat-t-u (cat-9:k-z-1)))
              abar-degr
              gnrt)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (print (cat-9:? c (+ 6 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 6 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 11)
                (print (cat-9:? c (+ 4 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 4 abar-degr)
                                                     gnrt)))))))))

  (test cs-left-hmeq-hat
        (cat-9:cat-9-init)
        (let ((c (cat-9:cs-left-hmeq-hat (cat-9:k-z-1)))
              abar-degr
              gnrt)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (print (cat-9:? c (+ 6 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 6 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (print (cat-9:? c (+ 5 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 5 abar-degr)
                                                     gnrt)))))))
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 11)
                (print (cat-9:? c (+ 4 abar-degr) gnrt))
                (is (cat-9:cmbn-zero-p (cat-9:? c (cat-9:? c (+ 4 abar-degr)
                                                     gnrt)))))))))

  (test cs-pre-left-hmeq-left-reduction
        (cat-9:cat-9-init)
        (let ((rdct (cat-9:cs-pre-left-hmeq-left-reduction (cat-9:k-z-1)))
              abar-degr
              gnrt
              gbar)
          (cat-9:pre-check-rdct rdct)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 2 0 '(1) 0 '()))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn 2 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 3 0 '(1 2) 1 '() 0 '()))
              (unless (>= abar-degr 8)
                (setf cat-9:*tc* (cat-9:cmbn (+ 6 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn 3 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 4 0 '(1 2 3) 0 '(4 5) 0 '(6) 0 '()))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn 4 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 5 8 '(1 2 3) 0 '(4 5 6) 0 '(7 8) 0 '(9)
                                   0 '()))
              (unless (>= abar-degr 10)
                (setf cat-9:*tc* (cat-9:cmbn (+ 4 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn 5 1 gbar))
                (check-rdct))))))


  (test cs-left-hmeq-left-reduction
        (cat-9:cat-9-init)
        (let ((rdct (cat-9:cs-left-hmeq-left-reduction (cat-9:k-z-1)))
              abar-degr
              gnrt
              gbar)
          (cat-9:pre-check-rdct rdct)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 2 0 '(1) 0 '()))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn 2 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 3 0 '(1 2) 1 '() 0 '()))
              (unless (>= abar-degr 8)
                (setf cat-9:*tc* (cat-9:cmbn (+ 6 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn 3 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 4 0 '(1 2 3) 0 '(4 5) 0 '(6) 0 '()))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn 4 1 gbar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (setf gbar (cat-9:gbar 5 8 '(1 2 3) 0 '(4 5 6) 0 '(7 8) 0 '(9)
                                   0 '()))
              (unless (>= abar-degr 10)
                (setf cat-9:*tc* (cat-9:cmbn (+ 4 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn 5 1 gbar))
                (check-rdct))))))


  (test cs-pre-left-hmeq-right-reduction-intr-f
        (cat-9:cs-pre-left-hmeq-right-reduction-intr-f
         (cat-9:cmbn 4 2 (cat-9:tnpr 0 (cat-9:tnpr 0 cat-9:+null-gbar+ 0 'i)
                                 4 (cat-9:abar 2 'a 2 'b))
                   3 (cat-9:tnpr 0 (cat-9:tnpr 0 cat-9:+null-gbar+ 0 'i)
                               4 (cat-9:abar 2 'a 2 'c))
                   5 (cat-9:tnpr 1 (cat-9:tnpr 0 cat-9:+null-gbar+ 1 'a)
                               3 (cat-9:abar 1 'a 2 'b)))))


  (test cs-pre-left-hmeq-right-reduction-g
        (let ((g (cat-9:cs-pre-left-hmeq-right-reduction-intr-g 'i)))
          (funcall g (cat-9:cmbn 3 2 (cat-9:abar 1 'a 2 'b)))))


  (test cs-pre-left-hmeq-right-reduction
        (cat-9:cat-9-init)
        (let ((rdct (cat-9:cs-pre-left-hmeq-right-reduction (cat-9:k-z-1)))
              abar-degr
              gnrt)
          (cat-9:pre-check-rdct rdct)
          (dotimes (i 10)
            (let ((abar (random-abar 8 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 6 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 0 '(3)
                                                           0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 8)
                (setf cat-9:*tc* (cat-9:cmbn (+ 6 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               3 '(4 5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 6 4)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(4 5))
                                   abar-degr abar))
              (unless (>= abar-degr 10)
                (setf cat-9:*tc* (cat-9:cmbn (+ 4 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))))

  (test cs-left-hmeq-right-reduction
        (cat-9:cat-9-init)
        (let ((rdct (cat-9:cs-left-hmeq-right-reduction (cat-9:k-z-1)))
              abar-degr
              gnrt)
          (cat-9:pre-check-rdct rdct)
          (dotimes (i 10)
            (let ((abar (random-abar 4 2)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 3 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               1 '(4))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 3 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 3 1)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 4 (cat-9:tnpr 2 (cat-9:gbar 2 0 '(3) 0 '())
                                               2 '(5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 8)
                (setf cat-9:*tc* (cat-9:cmbn (+ 4 abar-degr) 1 gnrt)
                      cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))
          (dotimes (i 10)
            (let ((abar (random-abar 3 1)))
              (setf abar-degr (apply #'+ (mapcar #'car (cat-9:abar-list abar))))
              (setf gnrt (cat-9:tnpr 5 (cat-9:tnpr 3 (cat-9:gbar 3 0 '(1 2) 1 '()
                                                           0 '())
                                               2 '(5 6))
                                   abar-degr abar))
              (unless (>= abar-degr 9)
                (setf cat-9:*tc* (cat-9:cmbn (+ 5 abar-degr) 1 gnrt))
                (setf cat-9:*bc* (cat-9:cmbn abar-degr 1 abar))
                (check-rdct))))))


  (test cs-left-hmeq
        (cat-9:cat-9-init)
        (let* ((h (cat-9:cs-left-hmeq (cat-9:k-z-1)))
               (abar (cat-9:abar 2 '(2) 3 '(3 4))))
          (cat-9:rf h
                  (cat-9:lg h
                          (cat-9:lf h
                                  (cat-9:rg h 5 abar)))))))


(test classifying-space
      (cat-9:cat-9-init)
      (let* ((k (cat-9:k-z-1))
             (bk (cat-9:classifying-space k))
             (obk (cat-9:loop-space bk)))
        (cat-9:homology k 0 10)
        (cat-9:homology bk 0 10)
        (cat-9:homology obk 0 6)))
