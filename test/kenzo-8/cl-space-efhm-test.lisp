;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*

(in-package :kenzo-test-8)

(in-suite :kenzo-8)

(test cs-hat-u-t
      (cat-8:cat-init)
      (let ((c (cat-8:cs-hat-u-t (cat-8:k-z-1)))
            abar-degr
            gnrt)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (print (cat-8:? c (+ 6 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 6 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 11)
              (print (cat-8:? c (+ 4 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 4 abar-degr)
                                                         gnrt)))))))))


(test cs-hat-t-u
      (cat-8:cat-init)
      (dotimes (i 5) (print (random-abar 8 4)))
      (let ((c (cat-8:cs-hat-t-u (cat-8:k-z-1)))
            abar-degr
            gnrt)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (print (cat-8:? c (+ 6 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 6 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 11)
              (print (cat-8:? c (+ 4 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 4 abar-degr)
                                                         gnrt)))))))))

(test cs-left-hmeq-hat
      (cat-8:cat-init)
      (let ((c (cat-8:cs-left-hmeq-hat (cat-8:k-z-1)))
            abar-degr
            gnrt)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (print (cat-8:? c (+ 6 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 6 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (print (cat-8:? c (+ 5 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 5 abar-degr)
                                                         gnrt)))))))
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 11)
              (print (cat-8:? c (+ 4 abar-degr) gnrt))
              (is (cat-8:cmbn-zero-p (cat-8:? c (cat-8:? c (+ 4 abar-degr)
                                                         gnrt)))))))))

(test cs-pre-left-hmeq-left-reduction
      (cat-8:cat-init)
      (let ((rdct (cat-8:cs-pre-left-hmeq-left-reduction (cat-8:k-z-1)))
            abar-degr
            gnrt
            gbar)
        (cat-8:pre-check-rdct rdct)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 2 0 '(1) 0 '()))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn 2 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 3 0 '(1 2) 1 '() 0 '()))
            (unless (>= abar-degr 8)
              (setf cat-8:*tc* (cat-8:cmbn (+ 6 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn 3 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 4 0 '(1 2 3) 0 '(4 5) 0 '(6) 0 '()))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn 4 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 5 8 '(1 2 3) 0 '(4 5 6) 0 '(7 8) 0 '(9)
                                   0 '()))
            (unless (>= abar-degr 10)
              (setf cat-8:*tc* (cat-8:cmbn (+ 4 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn 5 1 gbar))
              (check-rdct))))))


(test cs-left-hmeq-left-reduction
      (cat-8:cat-init)
      (let ((rdct (cat-8:cs-left-hmeq-left-reduction (cat-8:k-z-1)))
            abar-degr
            gnrt
            gbar)
        (cat-8:pre-check-rdct rdct)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 2 0 '(1) 0 '()))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn 2 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 3 0 '(1 2) 1 '() 0 '()))
            (unless (>= abar-degr 8)
              (setf cat-8:*tc* (cat-8:cmbn (+ 6 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn 3 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 4 0 '(1 2 3) 0 '(4 5) 0 '(6) 0 '()))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn 4 1 gbar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (setf gbar (cat-8:gbar 5 8 '(1 2 3) 0 '(4 5 6) 0 '(7 8) 0 '(9)
                                   0 '()))
            (unless (>= abar-degr 10)
              (setf cat-8:*tc* (cat-8:cmbn (+ 4 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn 5 1 gbar))
              (check-rdct))))))


(test cs-pre-left-hmeq-right-reduction-intr-f
      (cat-8:cs-pre-left-hmeq-right-reduction-intr-f
       (cat-8:cmbn 4 2 (cat-8:tnpr 0 (cat-8:tnpr 0 cat-8:+null-gbar+ 0 'i)
                                   4 (cat-8:abar 2 'a 2 'b))
                   3 (cat-8:tnpr 0 (cat-8:tnpr 0 cat-8:+null-gbar+ 0 'i)
                                 4 (cat-8:abar 2 'a 2 'c))
                   5 (cat-8:tnpr 1 (cat-8:tnpr 0 cat-8:+null-gbar+ 1 'a)
                                 3 (cat-8:abar 1 'a 2 'b)))))


(test cs-pre-left-hmeq-right-reduction-g
      (let ((g (cat-8:cs-pre-left-hmeq-right-reduction-intr-g 'i)))
        (funcall g (cat-8:cmbn 3 2 (cat-8:abar 1 'a 2 'b)))))


(test cs-pre-left-hmeq-right-reduction
      (cat-8:cat-init)
      (let ((rdct (cat-8:cs-pre-left-hmeq-right-reduction (cat-8:k-z-1)))
            abar-degr
            gnrt)
        (cat-8:pre-check-rdct rdct)
        (dotimes (i 10)
          (let ((abar (random-abar 8 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 6 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 0 '(3)
                                                               0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 8)
              (setf cat-8:*tc* (cat-8:cmbn (+ 6 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 3 '(4 5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 6 4)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(4 5))
                                   abar-degr abar))
            (unless (>= abar-degr 10)
              (setf cat-8:*tc* (cat-8:cmbn (+ 4 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))))

(test cs-left-hmeq-right-reduction
      (cat-8:cat-init)
      (let ((rdct (cat-8:cs-left-hmeq-right-reduction (cat-8:k-z-1)))
            abar-degr
            gnrt)
        (cat-8:pre-check-rdct rdct)
        (dotimes (i 10)
          (let ((abar (random-abar 4 2)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 3 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 1 '(4))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 3 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 3 1)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 4 (cat-8:tnpr 2 (cat-8:gbar 2 0 '(3) 0 '())
                                                 2 '(5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 8)
              (setf cat-8:*tc* (cat-8:cmbn (+ 4 abar-degr) 1 gnrt)
                    cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))
        (dotimes (i 10)
          (let ((abar (random-abar 3 1)))
            (setf abar-degr (apply #'+ (mapcar #'car (cat-8:abar-list abar))))
            (setf gnrt (cat-8:tnpr 5 (cat-8:tnpr 3 (cat-8:gbar 3 0 '(1 2) 1 '()
                                                               0 '())
                                                 2 '(5 6))
                                   abar-degr abar))
            (unless (>= abar-degr 9)
              (setf cat-8:*tc* (cat-8:cmbn (+ 5 abar-degr) 1 gnrt))
              (setf cat-8:*bc* (cat-8:cmbn abar-degr 1 abar))
              (check-rdct))))))


(test cs-left-hmeq
      (cat-8:cat-init)
      (let* ((h (cat-8:cs-left-hmeq (cat-8:k-z-1)))
             (abar (cat-8:abar 2 '(2) 3 '(3 4))))
        (cat-8:rf h
                  (cat-8:lg h
                            (cat-8:lf h
                                      (cat-8:rg h 5 abar))))))

(test classifying-space
      (cat-8:cat-init)
      (let* ((k (cat-8:k-z-1))
             (bk (cat-8:classifying-space k))
             (obk (cat-8:loop-space bk)))
        (cat-8:homology k 0 10)
        (cat-8:homology bk 0 10)
        (cat-8:homology obk 0 6)))
